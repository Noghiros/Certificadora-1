
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.*;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author win
 */
public class Listas extends javax.swing.JFrame {
    private static Listas listas;
    private int pontosGanhos = 0;
    private int pontosQuestao = 0;
    private int aleatorio = 0;
    private HashMap<Integer, Boolean> problemasResolvidos = new HashMap<>();

    public void setAleatorioPrincipal(int valorAleatorio, int id) {
        int colunaAleatorio = 2;
        String resolvido;

        if (valorAleatorio == 1) {
            resolvido = "Sim";
        } else {
            resolvido = "Não";
        }

        jTQuestões.setValueAt(resolvido, id, colunaAleatorio);

        int nivel = (int) jTQuestões.getValueAt(id, 1);

        switch (nivel) {
            case 1:
                pontosQuestao = 100;
                break;
            case 2:
                pontosQuestao = 250;
                break;
            case 3:
                pontosQuestao = 500;
                break;
            default:
                break;
        }

        if (valorAleatorio != 1) {
            pontosQuestao /= 2;
            aleatorio++;
        } else {

            pontosGanhos += pontosQuestao / Math.pow(2, aleatorio);

            aleatorio = 0;
        }

        atualizarPontosGanhos();
    }

    private void atualizarPontosGanhos() {
        Totalpontos.setText(Integer.toString(pontosGanhos));
    }

    /**
     * Creates new form Listas
     */

    private boolean exercicio1Nivel1RespondidoEAcertado() {

        boolean exercicio1Nivel1Respondido = true;
        boolean exercicio1Nivel1Acertado = false;

        return exercicio1Nivel1Respondido && exercicio1Nivel1Acertado;
    }

    public Listas() {
        initComponents();

        Totalpontos.setEditable(false);
        Totalpontos.setText(Integer.toString(pontosGanhos));
        DefaultTableModel modelo = (DefaultTableModel) jTQuestões.getModel();
        jTQuestões.setRowSorter(new TableRowSorter(modelo));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTQuestões = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        Totalpontos = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Problemas Disponíveis");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Problemas Disponíveis");
        JsonNode[] niveis = new JsonNode[10];
        int[] converter = new int[10];

        try {
            String caminhoArquivo = "src/main/java/exercicios.json";
            FileReader reader = new FileReader(caminhoArquivo);
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode exercicios = objectMapper.readTree(reader);

            for (int i = 0; i < 10; i++) {
                niveis[i] = exercicios.get(i).get("nivel");
            }

            for (int i = 0; i < 10; i++) {
                converter[i] = niveis[i].intValue();
            }

            jTQuestões.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][] {
                            { 1, converter[0], null },
                            { 2, converter[1], null },
                            { 3, converter[2], null },
                            { 4, converter[3], null },
                            { 5, converter[4], null },
                            { 6, converter[5], null },
                            { 7, converter[6], null },
                            { 8, converter[7], null },
                            { 9, converter[8], null },
                            { 10, converter[9], null }
                    },
                    new String[] {
                            "Problemas", "Nível", "Resolvido"
                    }) {
                Class[] types = new Class[] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Byte.class
                };
                boolean[] canEdit = new boolean[] {
                        false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }

            });

            jTQuestões.getTableHeader().setReorderingAllowed(false);
            jScrollPane1.setViewportView(jTQuestões);
            if (jTQuestões.getColumnModel().getColumnCount() > 0) {
                jTQuestões.getColumnModel().getColumn(0).setResizable(false);
                jTQuestões.getColumnModel().getColumn(1).setResizable(false);
                jTQuestões.getColumnModel().getColumn(2).setResizable(false);
            }

            jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
            jLabel3.setForeground(new java.awt.Color(255, 255, 255));
            jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

            jLabel3.setText("Pontuação Total");

            jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
            jLabel4.setForeground(new java.awt.Color(255, 255, 255));
            jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel4.setText("Pontos:");

            jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
            jLabel5.setForeground(new java.awt.Color(255, 255, 255));
            jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel5.setText("* Nível 2 - 250 pontos");

            jLabel6.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
            jLabel6.setForeground(new java.awt.Color(255, 255, 255));
            jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel6.setText("* Nível 3 - 500 pontos");

            jLabel7.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
            jLabel7.setForeground(new java.awt.Color(255, 255, 255));
            jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel7.setText("* Nível 1 - 100 pontos");
        } catch (Exception e) {
            e.printStackTrace();
        }
        jButton1.setText("Problema 1");

        if (converter[0] == 1) {
            jButton1.setEnabled(true);

            jButton1.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    int numeroProblema = 1;
                    int Q1 = 0;
                    
                    if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                        int escolha = JOptionPane.showConfirmDialog(null,
                                "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 1",
                                JOptionPane.YES_NO_OPTION);
                        if (escolha == JOptionPane.NO_OPTION) {
                            return;
                        }
                        
                        int escolha2 = JOptionPane.showConfirmDialog(null,
                                "Deseja aumentar a dificuldade?", "Exercício 1",
                                JOptionPane.YES_NO_OPTION);
                        if (escolha2 == JOptionPane.YES_OPTION) {
                            Q1=10;
                        }else {Q1=0;}
                    }

                    try {
                        String caminhoArquivo = "src/main/java/exercicios.json";
                        FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                        ObjectMapper objectMapper = new ObjectMapper();
                        JsonNode exerciciosJson = objectMapper.readTree(reader);

                        JsonNode exercicioid1 = exerciciosJson.get(Q1);

                        if (exercicioid1 != null) {
                            String tituloExercicio1 = exercicioid1.get("pergunta").asText();
                            String respostaExercicio1 = exercicioid1.get("resposta").asText();

                            JFrame novaTela = new JFrame("Exercício 1");
                            novaTela.setSize(600, 400);
                            novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            novaTela.setLocationRelativeTo(null);
                            JPanel painel = new JPanel(new GridLayout(3, 1));

                            JTextArea perguntaTextArea = new JTextArea("Pergunta: " + tituloExercicio1);
                            perguntaTextArea.setEditable(false);
                            perguntaTextArea.setWrapStyleWord(true);
                            perguntaTextArea.setLineWrap(true);
                            perguntaTextArea.setOpaque(false);
                            perguntaTextArea.setFocusable(false);
                            painel.add(perguntaTextArea);

                            JPanel painelResposta = new JPanel();
                            JTextField respostaTextField = new JTextField(20);
                            JButton enviarBotao = new JButton("Enviar");
                            painelResposta.add(respostaTextField);
                            painelResposta.add(enviarBotao);
                            painel.add(painelResposta);

                            novaTela.add(painel);
                            novaTela.setVisible(true);

                            enviarBotao.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    String respostaDigitada = respostaTextField.getText().replace(',', '.');
                                    float respostaEsperada = Float.parseFloat(respostaExercicio1.replace(',', '.'));

                                    try {
                                        float respostaUsuario = Float.parseFloat(respostaDigitada);

                                        if (respostaUsuario == respostaEsperada) {
                                            JOptionPane.showMessageDialog(null, "Resposta correta!");
                                            int aleatorio = 1;
                                            jButton2.setEnabled(true);
                                            jButton4.setEnabled(true);
                                            jButton6.setEnabled(true);
                                            jButton8.setEnabled(true);
                                            jButton10.setEnabled(true);
                                            JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio1);
                                            respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                            painel.add(respostaLabel);
                                            novaTela.revalidate();
                                            novaTela.repaint();
                                            problemasResolvidos.put(numeroProblema, true);
                                            setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                            novaTela.dispose();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                            int aleatorio = 0;
                                            jButton2.setEnabled(false);
                                            problemasResolvidos.put(numeroProblema, true);
                                            setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                            novaTela.dispose();
                                        }

                                        respostaTextField.setText("");
                                    } catch (NumberFormatException ex) {
                                        JOptionPane.showMessageDialog(null, "Digite uma resposta válida.");
                                    }
                                }
                            });
                        } 
                    } catch (FileNotFoundException ex) {
                        ex.printStackTrace();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            });
        } else {
            jButton1.setEnabled(false);
        }

        jButton2.setText("Problema 2");

        boolean exercicio1Nivel1RespondidoEAcertado = exercicio1Nivel1RespondidoEAcertado();
        jButton2.setEnabled(exercicio1Nivel1RespondidoEAcertado);

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int numeroProblema = 2;
                int Q2=1;
                if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                    int escolha = JOptionPane.showConfirmDialog(null,
                            "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 2",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha == JOptionPane.NO_OPTION) {
                        return;
                    }           
                    int escolha2 = JOptionPane.showConfirmDialog(null,
                            "Deseja aumentar a dificuldade?", "Exercício 1",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha2 == JOptionPane.YES_OPTION) {
                        Q2=11;
                    }else {Q2=1;}
                }
                try {
                    String caminhoArquivo = "src/main/java/exercicios.json";
                    FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                    ObjectMapper objectMapper = new ObjectMapper();
                    JsonNode exerciciosJson = objectMapper.readTree(reader);

                    JsonNode exercicioid2 = exerciciosJson.get(Q2);
                    if (exercicioid2 != null) {
                        String tituloExercicio2 = exercicioid2.get("pergunta").asText();
                        String respostaExercicio2 = exercicioid2.get("resposta").asText();

                        JFrame novaTela = new JFrame("Exercício 2");
                        novaTela.setSize(600, 400);
                        novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        novaTela.setLocationRelativeTo(null);
                        JPanel painel = new JPanel(new GridLayout(3, 1));

                        JTextArea perguntaTextArea = new JTextArea(tituloExercicio2);
                        perguntaTextArea.setWrapStyleWord(true);
                        perguntaTextArea.setLineWrap(true);
                        perguntaTextArea.setOpaque(false);
                        perguntaTextArea.setEditable(false);
                        painel.add(perguntaTextArea);

                        JPanel painelResposta = new JPanel();
                        JTextField respostaTextField = new JTextField(20);
                        JButton enviarBotao = new JButton("Enviar");
                        painelResposta.add(respostaTextField);
                        painelResposta.add(enviarBotao);
                        painel.add(painelResposta);

                        novaTela.add(painel);
                        novaTela.setVisible(true);

                        enviarBotao.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                String respostaDigitada = respostaTextField.getText().replace(',', '.');
                                float respostaEsperada = Float.parseFloat(respostaExercicio2.replace(',', '.'));

                                try {
                                    float respostaUsuario = Float.parseFloat(respostaDigitada);

                                    if (respostaUsuario == respostaEsperada) {
                                        JOptionPane.showMessageDialog(null, "Resposta correta!");
                                        int aleatorio = 1;
                                        jButton3.setEnabled(true);
                                        jButton7.setEnabled(true);
                                        JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio2);
                                        respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                        painel.add(respostaLabel);
                                        novaTela.revalidate();
                                        novaTela.repaint();
                                        problemasResolvidos.put(numeroProblema, true);
                                        setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                        novaTela.dispose();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                        int aleatorio = 0;
                                        jButton3.setEnabled(false);
                                        problemasResolvidos.put(numeroProblema, true);
                                        setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                        novaTela.dispose();
                                    }

                                    respostaTextField.setText("");
                                } catch (NumberFormatException ex) {
                                    JOptionPane.showMessageDialog(null, "Digite uma resposta válida (número).");
                                }
                            }
                        });
                    }
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        jButton3.setText("Problema 3");

        boolean exercicio2Nivel1RespondidoEAcertado = false;
        if (exercicio2Nivel1RespondidoEAcertado) {
            jButton3.setEnabled(true);
        } else {
            jButton3.setEnabled(false);
        }

        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int numeroProblema = 3;
                int Q3 = 2;

                if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                    int escolha = JOptionPane.showConfirmDialog(null,
                            "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 3",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha == JOptionPane.NO_OPTION) {
                        return;
                    }
                    int escolha2 = JOptionPane.showConfirmDialog(null,
                        "Deseja aumentar a dificuldade?", "Exercício 1",
                        JOptionPane.YES_NO_OPTION);
                    if (escolha2 == JOptionPane.YES_OPTION) {
                        Q3=12;
                    }else {Q3=2;}
                }
                try {
                    String caminhoArquivo = "src/main/java/exercicios.json";
                    FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                    ObjectMapper objectMapper = new ObjectMapper();
                    JsonNode exerciciosJson = objectMapper.readTree(reader);

                    JsonNode exercicioid3 = exerciciosJson.get(Q3);
                    if (exercicioid3 != null) {
                        String tituloExercicio3 = exercicioid3.get("pergunta").asText();
                        String respostaExercicio3 = exercicioid3.get("resposta").asText();

                        JFrame novaTela = new JFrame("Exercício 3");
                        novaTela.setSize(600, 400);
                        novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        novaTela.setLocationRelativeTo(null);
                        JPanel painel = new JPanel(new GridLayout(3, 1));

                        JTextArea perguntaTextArea = new JTextArea(tituloExercicio3);
                        perguntaTextArea.setWrapStyleWord(true);
                        perguntaTextArea.setLineWrap(true);
                        perguntaTextArea.setOpaque(false);
                        perguntaTextArea.setEditable(false);
                        painel.add(perguntaTextArea);

                        JPanel painelResposta = new JPanel();
                        JTextField respostaTextField = new JTextField(20);
                        JButton enviarBotao = new JButton("Enviar");
                        painelResposta.add(respostaTextField);
                        painelResposta.add(enviarBotao);
                        painel.add(painelResposta);

                        novaTela.add(painel);

                        enviarBotao.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                String respostaDigitada = respostaTextField.getText();
                                String respostaEsperada = respostaExercicio3;

                                if (respostaDigitada.equals(respostaEsperada)) {
                                    JOptionPane.showMessageDialog(null, "Resposta correta!");
                                    int aleatorio = 1;
                                    JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio3);
                                    respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                    painel.add(respostaLabel);
                                    novaTela.revalidate();
                                    novaTela.repaint();
                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                    int aleatorio = 0;
                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                }
                                respostaTextField.setText("");
                            }
                        });
                        novaTela.setVisible(true);
                    }
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        jButton4.setText("Problema 4");
        jButton4.setEnabled(false);

        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int numeroProblema = 4;
                int Q4 = 3;

                if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                    int escolha = JOptionPane.showConfirmDialog(null,
                            "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 4",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha == JOptionPane.NO_OPTION) {
                        return;
                    }           
                    int escolha2 = JOptionPane.showConfirmDialog(null,
                            "Deseja aumentar a dificuldade?", "Exercício 1",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha2 == JOptionPane.YES_OPTION) {
                        Q4=13;
                    }else {Q4=3;}
                }
                try {
                    String caminhoArquivo = "src/main/java/exercicios.json";
                    FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                    ObjectMapper objectMapper = new ObjectMapper();
                    JsonNode exerciciosJson = objectMapper.readTree(reader);

                    JsonNode exercicioid4 = exerciciosJson.get(Q4);

                    if (exercicioid4 != null) {
                        String tituloExercicio4 = exercicioid4.get("pergunta").asText();
                        String respostaExercicio4 = exercicioid4.get("resposta").asText();

                        JFrame novaTela = new JFrame("Exercício 4");
                        novaTela.setSize(600, 400);
                        novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        novaTela.setLocationRelativeTo(null);
                        JPanel painel = new JPanel(new GridLayout(3, 1));

                        JTextArea perguntaTextArea = new JTextArea("Pergunta: " + tituloExercicio4);
                        perguntaTextArea.setWrapStyleWord(true);
                        perguntaTextArea.setLineWrap(true);
                        perguntaTextArea.setOpaque(false);
                        perguntaTextArea.setEditable(false);
                        painel.add(perguntaTextArea);

                        JPanel painelResposta = new JPanel();
                        JTextField respostaTextField = new JTextField(20);
                        JButton enviarBotao = new JButton("Enviar");
                        painelResposta.add(respostaTextField);
                        painelResposta.add(enviarBotao);
                        painel.add(painelResposta);

                        novaTela.add(painel);

                        enviarBotao.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                String respostaDigitada = respostaTextField.getText();

                                if (respostaDigitada.equals(respostaExercicio4)) {
                                    JOptionPane.showMessageDialog(null, "Resposta correta!");
                                    int aleatorio = 1;
                                    jButton3.setEnabled(true);

                                    jButton4.setEnabled(true);
                                    jButton6.setEnabled(true);
                                    jButton8.setEnabled(true);
                                    jButton10.setEnabled(true);
                                    JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio4);
                                    respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                    painel.add(respostaLabel);
                                    novaTela.revalidate();
                                    novaTela.repaint();
                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();

                                } else {
                                    JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                    int aleatorio = 0;
                                    jButton3.setEnabled(false);
                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                }

                                respostaTextField.setText("");
                            }
                        });
                        novaTela.setVisible(true);
                    }
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        jButton5.setText("Problema 5");
        if (converter[4] == 1) {
            jButton5.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    int numeroProblema = 5;
                    int Q5 = 4;
                    if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                        int escolha = JOptionPane.showConfirmDialog(null,
                                "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 5",
                                JOptionPane.YES_NO_OPTION);
                        if (escolha == JOptionPane.NO_OPTION) {
                            return;
                        }
                        int escolha2 = JOptionPane.showConfirmDialog(null,
                                "Deseja aumentar a dificuldade?", "Exercício 5",
                                JOptionPane.YES_NO_OPTION);
                        if (escolha2 == JOptionPane.YES_OPTION) {
                            Q5=14;
                        }else {Q5=4;}
                    }
                    try {
                        String caminhoArquivo = "src/main/java/exercicios.json";
                        FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                        ObjectMapper objectMapper = new ObjectMapper();
                        JsonNode exerciciosJson = objectMapper.readTree(reader);

                        JsonNode exercicioid5 = exerciciosJson.get(Q5);

                        if (exercicioid5 != null) {
                            String tituloExercicio5 = exercicioid5.get("pergunta").asText();
                            String respostaExercicio5 = exercicioid5.get("resposta").asText();

                            JFrame novaTela = new JFrame("Exercício 5");
                            novaTela.setSize(600, 400);
                            novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            novaTela.setLocationRelativeTo(null);
                            JPanel painel = new JPanel(new GridLayout(3, 1));

                            JTextArea perguntaTextArea = new JTextArea("Pergunta: " + tituloExercicio5);
                            perguntaTextArea.setWrapStyleWord(true);
                            perguntaTextArea.setLineWrap(true);
                            perguntaTextArea.setOpaque(false);
                            perguntaTextArea.setEditable(false);
                            painel.add(perguntaTextArea);

                            JPanel painelResposta = new JPanel();
                            JTextField respostaTextField = new JTextField(20);
                            JButton enviarBotao = new JButton("Enviar");
                            painelResposta.add(respostaTextField);
                            painelResposta.add(enviarBotao);
                            painel.add(painelResposta);

                            novaTela.add(painel);

                            enviarBotao.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    String respostaDigitada = respostaTextField.getText();

                                    if (respostaDigitada.equals(respostaExercicio5)) {
                                        JOptionPane.showMessageDialog(null, "Resposta correta!");
                                        int aleatorio = 1;
                                        jButton2.setEnabled(true);
                                        jButton4.setEnabled(true);
                                        jButton6.setEnabled(true);
                                        jButton8.setEnabled(true);
                                        jButton10.setEnabled(true);
                                        JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio5);
                                        respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                        painel.add(respostaLabel);
                                        novaTela.revalidate();
                                        novaTela.repaint();

                                        problemasResolvidos.put(numeroProblema, true);
                                        setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                        novaTela.dispose();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                        int aleatorio = 0;
                                        problemasResolvidos.put(numeroProblema, true);
                                        setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                        novaTela.dispose();
                                    }

                                    respostaTextField.setText("");
                                }
                            });
                            novaTela.setVisible(true);
                        }
                    } catch (FileNotFoundException ex) {
                        ex.printStackTrace();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            });
        } else {
            jButton5.setEnabled(false);
        }
        jButton6.setText("Problema 6");

        exercicio1Nivel1RespondidoEAcertado = false;

        if (exercicio1Nivel1RespondidoEAcertado) {
            jButton6.setEnabled(true);
        } else {
            jButton6.setEnabled(false);
        }

        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int numeroProblema = 6;
                int Q6 = 5;

                if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                    int escolha = JOptionPane.showConfirmDialog(null,
                            "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 6",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha == JOptionPane.NO_OPTION) {
                        return;
                    }
                    int escolha2 = JOptionPane.showConfirmDialog(null,
                        "Deseja aumentar a dificuldade?", "Exercício 1",
                        JOptionPane.YES_NO_OPTION);
                    if (escolha2 == JOptionPane.YES_OPTION) {
                        Q6=15;
                    }else {Q6=5;}
                }
                try {
                    String caminhoArquivo = "src/main/java/exercicios.json";
                    FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                    ObjectMapper objectMapper = new ObjectMapper();
                    JsonNode exerciciosJson = objectMapper.readTree(reader);

                    JsonNode exercicioid6 = exerciciosJson.get(Q6);

                    if (exercicioid6 != null) {
                        String tituloExercicio6 = exercicioid6.get("pergunta").asText();
                        String respostaExercicio6 = exercicioid6.get("resposta").asText();

                        JFrame novaTela = new JFrame("Exercício 6");
                        novaTela.setSize(600, 400);
                        ;
                        novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        novaTela.setLocationRelativeTo(null);
                        JPanel painel = new JPanel(new GridLayout(3, 1));

                        JTextArea perguntaTextArea = new JTextArea("Pergunta: " + tituloExercicio6);
                        perguntaTextArea.setWrapStyleWord(true);
                        perguntaTextArea.setLineWrap(true);
                        perguntaTextArea.setOpaque(false);
                        perguntaTextArea.setEditable(false);
                        painel.add(perguntaTextArea);

                        JPanel painelResposta = new JPanel();
                        JTextField respostaTextField = new JTextField(20);
                        JButton enviarBotao = new JButton("Enviar");
                        painelResposta.add(respostaTextField);
                        painelResposta.add(enviarBotao);

                        painel.add(painelResposta);

                        novaTela.add(painel);

                        enviarBotao.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                String respostaDigitada = respostaTextField.getText();

                                if (respostaDigitada.equals(respostaExercicio6)) {
                                    JOptionPane.showMessageDialog(null, "Resposta correta!");
                                    int aleatorio = 1;
                                    jButton3.setEnabled(true);
                                    jButton7.setEnabled(true);
                                    JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio6);
                                    respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                    painel.add(respostaLabel);
                                    novaTela.revalidate();
                                    novaTela.repaint();

                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                    int aleatorio = 0;

                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                }

                                respostaTextField.setText("");
                            }
                        });
                        novaTela.setVisible(true);
                    }
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });
        jButton7.setText("Problema 7");

        boolean exercicio2Nivel2RespondidoEAcertado = false;

        if (exercicio2Nivel2RespondidoEAcertado) {
            jButton7.setEnabled(true);
        } else {
            jButton7.setEnabled(false);
        }

        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int numeroProblema = 7;
                int Q7 = 6;
                if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                    int escolha = JOptionPane.showConfirmDialog(null,
                            "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 7",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha == JOptionPane.NO_OPTION) {
                        return;
                    }
                    int escolha2 = JOptionPane.showConfirmDialog(null,
                        "Deseja aumentar a dificuldade?", "Exercício 1",
                        JOptionPane.YES_NO_OPTION);
                    if (escolha2 == JOptionPane.YES_OPTION) {
                        Q7=16;
                    }else {Q7=6;}

                }
                try {
                    String caminhoArquivo = "src/main/java/exercicios.json";
                    FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                    ObjectMapper objectMapper = new ObjectMapper();
                    JsonNode exerciciosJson = objectMapper.readTree(reader);

                    JsonNode exercicioid7 = exerciciosJson.get(Q7);

                    if (exercicioid7 != null) {
                        String tituloExercicio7 = exercicioid7.get("pergunta").asText();
                        String respostaExercicio7 = exercicioid7.get("resposta").asText();

                        JFrame novaTela = new JFrame("Exercício 7");
                        novaTela.setSize(600, 400);
                        novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        novaTela.setLocationRelativeTo(null);
                        JPanel painel = new JPanel(new GridLayout(3, 1));

                        JTextArea perguntaTextArea = new JTextArea("Pergunta: " + tituloExercicio7);
                        perguntaTextArea.setWrapStyleWord(true);
                        perguntaTextArea.setLineWrap(true);
                        perguntaTextArea.setOpaque(false);
                        perguntaTextArea.setEditable(false);
                        painel.add(perguntaTextArea);

                        JPanel painelResposta = new JPanel();
                        JTextField respostaTextField = new JTextField(20);
                        JButton enviarBotao = new JButton("Enviar");
                        painelResposta.add(respostaTextField);
                        painelResposta.add(enviarBotao);

                        painel.add(painelResposta);

                        novaTela.add(painel);

                        enviarBotao.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                String respostaDigitada = respostaTextField.getText();
                                String respostaEsperada = respostaExercicio7;

                                if (respostaDigitada.equals(respostaEsperada)) {
                                    JOptionPane.showMessageDialog(null, "Resposta correta!");
                                    int aleatorio = 1;
                                    JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio7);
                                    respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                    painel.add(respostaLabel);
                                    novaTela.revalidate();
                                    novaTela.repaint();

                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                    int aleatorio = 0;
                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                }
                                respostaTextField.setText("");
                            }
                        });
                        novaTela.setVisible(true);
                    }
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        jButton8.setText("Problema 8");

        exercicio1Nivel1RespondidoEAcertado = false;

        if (exercicio1Nivel1RespondidoEAcertado) {
            jButton8.setEnabled(true);
        } else {
            jButton8.setEnabled(false);
        }

        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int numeroProblema = 8;
                int Q8 = 7;
                if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                    int escolha = JOptionPane.showConfirmDialog(null,
                            "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 8",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha == JOptionPane.NO_OPTION) {
                        return;
                    }
                    int escolha2 = JOptionPane.showConfirmDialog(null,
                        "Deseja aumentar a dificuldade?", "Exercício 1",
                        JOptionPane.YES_NO_OPTION);
                    if (escolha2 == JOptionPane.YES_OPTION) {
                        Q8=17;
                    }else {Q8=7;}
                }
                try {
                    String caminhoArquivo = "src/main/java/exercicios.json";
                    FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                    ObjectMapper objectMapper = new ObjectMapper();
                    JsonNode exerciciosJson = objectMapper.readTree(reader);

                    JsonNode exercicioid8 = exerciciosJson.get(Q8);

                    if (exercicioid8 != null) {
                        String tituloExercicio8 = exercicioid8.get("pergunta").asText();
                        String respostaExercicio8 = exercicioid8.get("resposta").asText();

                        JFrame novaTela = new JFrame("Exercício 8");
                        novaTela.setSize(600, 400);
                        novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        novaTela.setLocationRelativeTo(null);
                        JPanel painel = new JPanel(new GridLayout(3, 1));

                        JTextArea perguntaTextArea = new JTextArea("Pergunta: " + tituloExercicio8);
                        perguntaTextArea.setWrapStyleWord(true);
                        perguntaTextArea.setLineWrap(true);
                        perguntaTextArea.setOpaque(false);
                        perguntaTextArea.setEditable(false);
                        painel.add(perguntaTextArea);

                        JPanel painelResposta = new JPanel();
                        JTextField respostaTextField = new JTextField(20);
                        JButton enviarBotao = new JButton("Enviar");
                        painelResposta.add(respostaTextField);
                        painelResposta.add(enviarBotao);

                        painel.add(painelResposta);

                        novaTela.add(painel);

                        enviarBotao.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                String respostaDigitada = respostaTextField.getText();

                                if (respostaDigitada.equals(respostaExercicio8)) {
                                    JOptionPane.showMessageDialog(null, "Resposta correta!");
                                    int aleatorio = 1;
                                    jButton3.setEnabled(true);
                                    jButton7.setEnabled(true);
                                    JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio8);
                                    respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                    painel.add(respostaLabel);
                                    novaTela.revalidate();
                                    novaTela.repaint();

                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                    int aleatorio = 0;
                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                }

                                respostaTextField.setText("");
                            }
                        });
                        novaTela.setVisible(true);
                    }
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        jButton9.setText("Problema 9");
        if (converter[8] == 1) {
            jButton9.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    int numeroProblema = 9;
                    int Q9= 8;
                    if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                        int escolha = JOptionPane.showConfirmDialog(null,
                                "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 9",
                                JOptionPane.YES_NO_OPTION);
                        if (escolha == JOptionPane.NO_OPTION) {
                            return;
                        }
                        int escolha2 = JOptionPane.showConfirmDialog(null,
                        "Deseja aumentar a dificuldade?", "Exercício 1",
                        JOptionPane.YES_NO_OPTION);
                    if (escolha2 == JOptionPane.YES_OPTION) {
                        Q9=18;
                    }else {Q9=8;}
                    }
                    try {
                        String caminhoArquivo = "src/main/java/exercicios.json";
                        FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                        ObjectMapper objectMapper = new ObjectMapper();
                        JsonNode exerciciosJson = objectMapper.readTree(reader);

                        JsonNode exercicioid9 = exerciciosJson.get(Q9);

                        if (exercicioid9 != null) {
                            String tituloExercicio9 = exercicioid9.get("pergunta").asText();
                            String respostaExercicio9 = exercicioid9.get("resposta").asText();

                            JFrame novaTela = new JFrame("Exercício 9");
                            novaTela.setSize(600, 400);
                            novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            novaTela.setLocationRelativeTo(null);
                            JPanel painel = new JPanel(new GridLayout(3, 1));

                            JTextArea perguntaTextArea = new JTextArea("Pergunta: " + tituloExercicio9);
                            perguntaTextArea.setWrapStyleWord(true);
                            perguntaTextArea.setLineWrap(true);
                            perguntaTextArea.setOpaque(false);
                            perguntaTextArea.setEditable(false);
                            painel.add(perguntaTextArea);

                            JPanel painelResposta = new JPanel();
                            JTextField respostaTextField = new JTextField(20);
                            JButton enviarBotao = new JButton("Enviar");
                            painelResposta.add(respostaTextField);
                            painelResposta.add(enviarBotao);
                            painel.add(painelResposta);

                            novaTela.add(painel);

                            enviarBotao.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    String respostaDigitada = respostaTextField.getText();

                                    if (respostaDigitada.equals(respostaExercicio9)) {
                                        JOptionPane.showMessageDialog(null, "Resposta correta!");
                                        int aleatorio = 1;
                                        jButton2.setEnabled(true);
                                        jButton4.setEnabled(true);
                                        jButton6.setEnabled(true);
                                        jButton8.setEnabled(true);
                                        jButton10.setEnabled(true);
                                        JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio9);
                                        respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                        painel.add(respostaLabel);
                                        novaTela.revalidate();
                                        novaTela.repaint();

                                        problemasResolvidos.put(numeroProblema, true);
                                        setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                        novaTela.dispose();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                        int aleatorio = 0;
                                        problemasResolvidos.put(numeroProblema, true);
                                        setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                        novaTela.dispose();
                                    }

                                    respostaTextField.setText("");
                                }
                            });
                            novaTela.setVisible(true);
                        }
                    } catch (FileNotFoundException ex) {
                        ex.printStackTrace();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            });
        } else {
            jButton9.setEnabled(false);
        }

        jButton10.setText("Problema 10");

        if (exercicio1Nivel1RespondidoEAcertado) {
            jButton10.setEnabled(true);
        } else {
            jButton10.setEnabled(false);
        }

        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int numeroProblema = 10;
                int Q10 = 9;
                if (problemasResolvidos.containsKey(numeroProblema) && problemasResolvidos.get(numeroProblema)) {
                    int escolha = JOptionPane.showConfirmDialog(null,
                            "Este problema já foi resolvido. Deseja resolver novamente?", "Exercício 10",
                            JOptionPane.YES_NO_OPTION);
                    if (escolha == JOptionPane.NO_OPTION) {
                        return;
                    }
                    int escolha2 = JOptionPane.showConfirmDialog(null,
                        "Deseja aumentar a dificuldade?", "Exercício 1",
                        JOptionPane.YES_NO_OPTION);
                    if (escolha2 == JOptionPane.YES_OPTION) {
                        Q10=19;
                    }else {Q10=9;}
                }
                try {
                    String caminhoArquivo = "src/main/java/exercicios.json";
                    FileReader reader = new FileReader(caminhoArquivo, StandardCharsets.UTF_8);
                    ObjectMapper objectMapper = new ObjectMapper();
                    JsonNode exerciciosJson = objectMapper.readTree(reader);

                    JsonNode exercicioid10 = exerciciosJson.get(Q10);

                    if (exercicioid10 != null) {
                        String tituloExercicio10 = exercicioid10.get("pergunta").asText();
                        String respostaExercicio10 = exercicioid10.get("resposta").asText();

                        JFrame novaTela = new JFrame("Exercício 10");
                        novaTela.setSize(600, 400);
                        novaTela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        novaTela.setLocationRelativeTo(null);
                        JPanel painel = new JPanel(new GridLayout(3, 1));

                        JTextArea perguntaTextArea = new JTextArea("Pergunta: " + tituloExercicio10);
                        perguntaTextArea.setWrapStyleWord(true);
                        perguntaTextArea.setLineWrap(true);
                        perguntaTextArea.setOpaque(false);
                        perguntaTextArea.setEditable(false);
                        painel.add(perguntaTextArea);

                        JPanel painelResposta = new JPanel();
                        JTextField respostaTextField = new JTextField(20);
                        JButton enviarBotao = new JButton("Enviar");
                        painelResposta.add(respostaTextField);
                        painelResposta.add(enviarBotao);
                        painel.add(painelResposta);

                        novaTela.add(painel);

                        enviarBotao.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                String respostaDigitada = respostaTextField.getText();

                                if (respostaDigitada.equals(respostaExercicio10)) {
                                    JOptionPane.showMessageDialog(null, "Resposta correta!");
                                    int aleatorio = 1;
                                    jButton3.setEnabled(true);
                                    jButton7.setEnabled(true);
                                    JLabel respostaLabel = new JLabel("A Resposta é: " + respostaExercicio10);
                                    respostaLabel.setHorizontalAlignment(SwingConstants.CENTER);
                                    painel.add(respostaLabel);
                                    novaTela.revalidate();
                                    novaTela.repaint();

                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Resposta incorreta. Tente novamente.");
                                    int aleatorio = 0;
                                    jButton3.setEnabled(false);

                                    problemasResolvidos.put(numeroProblema, true);
                                    setAleatorioPrincipal(aleatorio, numeroProblema - 1);
                                    novaTela.dispose();
                                }

                                respostaTextField.setText("");
                            }
                        });
                        novaTela.setVisible(true);
                    }
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel6)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel5)
                                                                        .addComponent(jLabel7))
                                                                .addGap(47, 47, 47)
                                                                .addGroup(jPanel1Layout.createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel3)
                                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                                .addGap(37, 37, 37)
                                                                                .addComponent(Totalpontos,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                        70,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE))))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                365, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane1,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 0,
                                                                Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54,
                                                        Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(20, 20, 20)))));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(jLabel1)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(33, 33, 33)
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel7)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(jLabel5))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addComponent(jLabel3)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(Totalpontos,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel6)
                                                .addGap(23, 23, 23))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton6)
                                                        .addComponent(jButton1))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton7)
                                                        .addComponent(jButton2))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton8)
                                                        .addComponent(jButton3))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton9)
                                                        .addComponent(jButton4))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton10)
                                                        .addComponent(jButton5))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        Short.MAX_VALUE)))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TotalpontosActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_TotalpontosActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_TotalpontosActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Listas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Listas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Listas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Listas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                listas = new Listas();
                listas.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Totalpontos;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTQuestões;
    // End of variables declaration//GEN-END:variables
}
